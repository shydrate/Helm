---
apiVersion: v1
kind: ServiceAccount
metadata:
  name: {{ .Values.prometheus.serviceAccount }}
  namespace: {{ .Release.Namespace }}
  labels:
    app: prometheus
    app.kubernetes.io/managed-by: {{ .Release.Service }}
  annotations:
    meta.helm.sh/release-namespace: {{ .Release.Namespace }}
---
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRole
metadata:
  name: prometheus
  labels:
    app: prometheus
    app.kubernetes.io/managed-by: {{ .Release.Service }}
  annotations:
    meta.helm.sh/release-namespace: {{ .Release.Namespace }}
rules:
- apiGroups: [""]
  resources:
  - nodes
  - nodes/metrics
  - services
  - endpoints
  - pods
  verbs: ["get", "list", "watch"]
- apiGroups: [""]
  resources:
  - configmaps
  verbs: ["get"]
- apiGroups:
  - networking.k8s.io
  resources:
  - ingresses
  verbs: ["get", "list", "watch"]
- nonResourceURLs: ["/metrics", "/metrics/cadvisor", "/metrics/resource", "/metrics/probes"]
  verbs: ["get"]
---
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRoleBinding
metadata:
  name: prometheus
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: ClusterRole
  name: prometheus
subjects:
- kind: ServiceAccount
  name: {{ .Values.prometheus.serviceAccount }}
  namespace: {{ .Release.Namespace }}
---
apiVersion: v1
kind: Service
metadata:
  name: prometheus-lb
  namespace: {{ .Release.Namespace }}
  labels:
    app: prometheus
    app.kubernetes.io/managed-by: {{ .Release.Service }}
  annotations:
    meta.helm.sh/release-namespace: {{ .Release.Namespace }}
    service.beta.kubernetes.io/aws-load-balancer-backend-protocol: http
    service.beta.kubernetes.io/aws-load-balancer-internal: "true"
    external-dns.alpha.kubernetes.io/hostname: {{ .Values.prometheus.dns.host }}.{{ .Values.prometheus.dns.fqdn }}
    external-dns.alpha.kubernetes.io/ttl: "{{ .Values.prometheus.dns.ttl }}"
spec:
  ports:
  - name: prometheus
    port: 80
    protocol: TCP
    targetPort: http-metrics
  selector:
    app: prometheus
  type: LoadBalancer
---
apiVersion: v1
kind: Service
metadata:
  name: prometheus
  namespace: {{ .Release.Namespace }}
  labels:
    app: prometheus
    app.kubernetes.io/managed-by: {{ .Release.Service }}
  annotations:
    meta.helm.sh/release-namespace: {{ .Release.Namespace }}
spec:
  ports:
  - name: prometheus
    port: 9090
    protocol: TCP
    targetPort: http-metrics
  selector:
    app: prometheus
  clusterIP: None
---
apiVersion: apps/v1
kind: StatefulSet
metadata:
  name: prometheus
  namespace: {{ .Release.Namespace }}
  labels:
    app: prometheus
    app.kubernetes.io/managed-by: {{ .Release.Service }}
  annotations:
    meta.helm.sh/release-namespace: {{ .Release.Namespace }}
spec:
  replicas: 1
  serviceName: prometheus
  selector:
    matchLabels:
      app: prometheus
  template:
    metadata:
      labels:
        app: prometheus
    spec:
      serviceAccountName: {{ .Values.prometheus.serviceAccount }}
      priorityClassName: lpg
      initContainers:
      - image: {{ .Values.prometheus.image }}
        name: prometheus-init-container
        command: ["sh", "-c", "chown -R 65534:65534 /prometheus"]
        volumeMounts:
        - name: prometheus-pvc
          mountPath: /prometheus
        securityContext:
          runAsUser: 0
      containers:
      - name: prometheus
        image: {{ .Values.prometheus.image }}
        args:
        - --config.file=/etc/prometheus/prometheus.yaml
        ports:
        - name: http-metrics
          containerPort: 9090
          protocol: TCP
        resources:
          requests:
            memory: {{ .Values.prometheus.resources.requests.memory }}
            cpu: {{ .Values.prometheus.resources.requests.cpu }}
          limits:
            memory: {{ .Values.prometheus.resources.limits.memory }}
            cpu: {{ .Values.prometheus.resources.limits.cpu }}
        livenessProbe:
          failureThreshold: 3
          httpGet:
            path: /-/healthy
            port: http-metrics
            scheme: HTTP
          initialDelaySeconds: 45
          periodSeconds: 10
          successThreshold: 1
          timeoutSeconds: 1
        readinessProbe:
          failureThreshold: 3
          httpGet:
            path: /-/healthy
            port: http-metrics
            scheme: HTTP
          initialDelaySeconds: 45
          periodSeconds: 10
          successThreshold: 1
          timeoutSeconds: 1
        volumeMounts:
        - name: prometheus-config
          mountPath: /etc/prometheus
        - name: prometheus-pvc
          mountPath: /prometheus
      volumes:
      - name: prometheus-config
        configMap:
          name: prometheus-config
  volumeClaimTemplates:
  - metadata:
      name: prometheus-pvc
    spec:
      accessModes: ["ReadWriteOnce"]
      storageClassName: lpg
      resources:
        requests:
          storage: {{ .Values.prometheus.storage.size }}
