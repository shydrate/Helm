apiVersion: v1
kind: Service
metadata:
  name: grafana
  namespace: {{ .Release.Namespace }}
  labels:
    app.kubernetes.io/managed-by: {{ .Release.Service }}
  annotations:
    meta.helm.sh/release-namespace: {{ .Release.Namespace }}
spec:
  type: NodePort
  selector:
    app: grafana
  ports:
  - protocol: TCP
    port: 80
    targetPort: http
    nodePort: 30081
---
apiVersion: apps/v1
kind: StatefulSet
metadata:
  name: grafana
  namespace: {{ .Release.Namespace }}
  labels:
    app: grafana
    app.kubernetes.io/managed-by: {{ .Release.Service }}
  annotations:
    meta.helm.sh/release-namespace: {{ .Release.Namespace }}
spec:
  serviceName: grafana
  replicas: 1
  selector:
    matchLabels:
      app: grafana
  template:
    metadata:
      labels:
        app: grafana
    spec:
      priorityClassName: lpg
      initContainers:
      - image: {{ .Values.grafana.image }}
        name: init
        command: ["sh", "-c", "chown -R 472:472 /var/lib/grafana"]
        volumeMounts:
        - name: grafana-pvc
          mountPath: /var/lib/grafana
        securityContext:
          runAsUser: 0
      containers:
      - image: {{ .Values.grafana.image }}
        name: grafana
        volumeMounts:
        - name: grafana-pvc
          mountPath: /var/lib/grafana
        - name: grafana-config
          mountPath: /etc/grafana
        - name: grafana-datasources
          mountPath: /etc/grafana/provisioning/datasources
        - name: grafana-dashboards
          mountPath: /etc/grafana/provisioning/dashboards
        ports:
        - name: http
          containerPort: 3000
          protocol: TCP
        resources:
          requests:
            memory: {{ .Values.grafana.resources.requests.memory }}
            cpu: {{ .Values.grafana.resources.requests.cpu }}
          limits:
            memory: {{ .Values.grafana.resources.limits.memory }}
            cpu: {{ .Values.grafana.resources.limits.cpu }}
        readinessProbe:
          httpGet:
            path: /api/health
            port: 3000
        livenessProbe:
          httpGet:
            path: /api/health
            port: 3000
          initialDelaySeconds: 60
          timeoutSeconds: 30
          failureThreshold: 10
      volumes:
      - name: grafana-config
        configMap:
          name: grafana-config
      - name: grafana-datasources
        configMap:
          name: grafana-datasources
      - name: grafana-dashboards
        configMap:
          name: grafana-dashboards
  volumeClaimTemplates:
  - metadata:
      name: grafana-pvc
    spec:
      accessModes: ["ReadWriteOnce"]
      storageClassName: lpg
      resources:
        requests:
          storage: {{ .Values.grafana.storage.size }}
